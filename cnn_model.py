# -*- coding: utf-8 -*-
"""cnn_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NMRWyB-CoffZrEWPleIphNODuHwLFuBN
"""

import tensorflow as tf
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Input, Flatten, Dense, MaxPooling2D, Reshape, Conv2D, Dropout, BatchNormalization
import matplotlib.pyplot as plt

#Importing MNIST DataSet
(X_train, Y_train), (X_test, Y_test) = mnist.load_data()

#Normalizing the Train and Test Data
X_train = tf.keras.utils.normalize(X_train, axis = 1)
X_test = tf.keras.utils.normalize(X_test, axis = 1)

#Designing the CNN Model
model = Sequential([
    Input(shape=(28, 28)),
    Reshape((28, 28, 1)),
    Conv2D(64, (3, 3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.3),
    Conv2D(32, (3, 3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.3),
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(10, activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

print(model.summary())

#Reshaping Test Data
X_test = X_test.reshape(-1, 28, 28, 1)

history = model.fit(X_train, Y_train, epochs=10, batch_size=120, validation_data=(X_test, Y_test))

test_loss, test_acc = model.evaluate(X_test, Y_test)
print(f"Test_accuracy: {test_acc}")
print(f"Test_loss: {test_loss}")

loss = history.history['loss']
accuracy = history.history['accuracy']
epochs = range(1, len(loss) + 1)

fig, ax1 = plt.subplots(figsize=(10, 6))

ax1.plot(epochs, loss, 'r-', label='Loss')
ax1.set_xlabel('Epochs')
ax1.set_ylabel('Loss', color='red')
ax1.tick_params(axis='y', labelcolor='red')

ax2 = ax1.twinx()
ax2.plot(epochs, accuracy, 'b-', label='Accuracy')
ax2.set_ylabel('Accuracy', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

fig.legend(loc="upper center")
plt.title('Loss and Accuracy Over Epochs')
plt.show()

accuracy = history.history['accuracy']
test_accuracy = history.history['val_accuracy']
epochs = range(1, len(accuracy) + 1)

fig, ax1 = plt.subplots(figsize=(10, 6))

ax1.plot(epochs, accuracy, 'r-', label='Train')
ax1.set_xlabel('Epochs')
ax1.set_ylabel('accuracy', color='red')
ax1.tick_params(axis='y', labelcolor='red')

ax2 = ax1.twinx()
ax2.plot(epochs, test_accuracy, 'b-', label='Test')
ax2.set_ylabel('test_accuracy', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

fig.legend(loc="upper center")
plt.title('train and test Over Epochs')
plt.show()

fig = plt.figure()
plt.subplot(2,1,1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower right')
plt.subplot(2,1,2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.tight_layout()

model.save('model.keras')